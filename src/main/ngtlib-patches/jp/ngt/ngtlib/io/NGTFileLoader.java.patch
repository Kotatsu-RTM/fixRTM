--- a/jp/ngt/ngtlib/io/NGTFileLoader.java
+++ b/jp/ngt/ngtlib/io/NGTFileLoader.java
@@ -38,11 +38,11 @@
       }
 
    }
 
    public static List<File> findFile(FileMatcher matcher) {
-      ScanResult scanresult = findFile(matcher);
+      ScanResult scanresult = findFile(new FileMatcher[] { matcher });
       return scanresult.asList();
    }
 
    public static ScanResult findFile(FileMatcher... matchers) {
       ScanResult scanresult = new ScanResult();
@@ -151,29 +151,21 @@
 
    public static List<File> getModsDir() {
       if (MODS_DIR != null) {
          return MODS_DIR;
       } else {
-         MODS_DIR = new ArrayList<>();
+         java.util.HashSet<File> mods = new java.util.HashSet<>();
 
-         try {
-            File file1 = new File(Thread.currentThread().getContextClassLoader().getResource("").getPath());
-            if (!file1.getAbsolutePath().contains("mods")) {
-               MODS_DIR.add(file1);
-               NGTLog.debug("[NGTFL] Add mods dir : " + file1.getAbsolutePath());
-            }
-         } catch (NullPointerException nullpointerexception) {
+         for (File jarOrDir : com.anatawa12.fixRtm.io.FIXFileLoader.INSTANCE.getModsOrJars()) {
+            if (jarOrDir.isDirectory())
+               mods.add(jarOrDir);
+            else
+               mods.add(jarOrDir.getParentFile());
          }
 
-         File file2 = NGTCore.proxy.getMinecraftDirectory("mods");
-         String s = file2.getAbsolutePath();
-         if (s.contains(".") && !s.contains(".minecraft")) {
-            s = s.replace("\\.", "");
-         }
-
-         MODS_DIR.add(new File(s));
-         NGTLog.debug("[NGTFL] Add mods dir : " + s);
+         MODS_DIR = new ArrayList<>(mods);
+         NGTLog.debug("[NGTFL] Add mods dir : " + MODS_DIR);
          return MODS_DIR;
       }
    }
 
    private static JFileChooser getCustomChooser(String title) {
@@ -231,23 +223,11 @@
          return null;
       }
    }
 
    public static InputStream getInputStream(ResourceLocation par1) throws IOException {
-      if (!NGTCore.proxy.isServer()) {
-         return NGTUtilClient.getMinecraft().getResourceManager().getResource(par1).getInputStream();
-      } else {
-         int i = par1.getPath().lastIndexOf("/");
-         String s = par1.getPath().substring(i + 1);
-         List<File> list = findFile((FileMatcher)((filex) -> filex.getName().equals(s)));
-         if (list.isEmpty()) {
-            throw new FileNotFoundException("On get stream : " + s);
-         } else {
-            File file1 = list.get(0);
-            return getInputStreamFromFile(file1);
-         }
-      }
+      return com.anatawa12.fixRtm.io.FIXFileLoader.INSTANCE.getInputStream(par1);
    }
 
    public static InputStream getInputStreamFromFile(File file) throws IOException {
       String s = getArchiveSuffix(file.getAbsolutePath());
       return (InputStream)(!s.isEmpty() ? getStreamFromArchive(file, s) : new FileInputStream(file));
