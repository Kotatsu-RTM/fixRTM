--- a/jp/ngt/rtm/rail/TileEntityMarker.java
+++ b/jp/ngt/rtm/rail/TileEntityMarker.java
@@ -40,38 +40,56 @@
    @SideOnly(Side.CLIENT)
    public InternalButton[] buttons;
    @SideOnly(Side.CLIENT)
    public float[][][] linePos;
    private int count;
+   java.util.UUID owner;
+   private Integer ownerEntityId;
 
    public TileEntityMarker() {
       this.markerState = MarkerState.DISTANCE.set(this.markerState, true);
       this.markerState = MarkerState.GRID.set(this.markerState, false);
       this.markerState = MarkerState.LINE1.set(this.markerState, false);
       this.markerState = MarkerState.LINE2.set(this.markerState, false);
       this.markerState = MarkerState.ANCHOR21.set(this.markerState, false);
+      this.markerState = MarkerState.FIT_NEIGHBOR.set(this.markerState, true);
    }
 
    public void readFromNBT(NBTTagCompound nbt) {
       super.readFromNBT(nbt);
       if (nbt.hasKey("RP")) {
-         this.rp = RailPosition.readFromNBT(nbt.getCompoundTag("RP"));
+         this.rp = RailPosition.readFromNBT(nbt.getCompoundTag("RP"), this.rp);
+      }
+
+      if (nbt.hasUniqueId("Owner")) {
+         this.owner = nbt.getUniqueId("Owner");
       }
 
+      if (nbt.hasKey("OwnerEntityId")) {
+         this.ownerEntityId = nbt.getInteger("OwnerEntityId");
+      }
    }
 
    public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
       super.writeToNBT(nbt);
       if (this.rp != null) {
          nbt.setTag("RP", this.rp.writeToNBT());
       }
 
+      if (this.owner != null) {
+         nbt.setUniqueId("Owner", this.owner);
+      }
+
+      if (this.ownerEntityId != null) {
+         nbt.setInteger("OwnerEntityId", this.ownerEntityId);
+      }
+
       return nbt;
    }
 
    public void update() {
-      if (this.rp == null) {
+      if (this.rp == null && this.ownerEntityId != null) {
          byte b0 = BlockMarker.getMarkerDir(this.getBlockType(), this.getBlockMetadata());
          byte b1 = (byte)(this.getBlockType() == RTMBlock.markerSwitch ? 1 : 0);
          this.rp = new RailPosition(this.getPos().getX(), this.getPos().getY(), this.getPos().getZ(), b0, b1);
          if (this.getWorld().isRemote) {
             for(TileEntity tileentity : this.getWorld().loadedTileEntityList) {
@@ -87,16 +105,29 @@
             this.updateStartPos();
             this.count = 0;
          }
 
          ++this.count;
-      }
+      } else {
+         net.minecraft.entity.player.EntityPlayer player = world.getPlayerEntityByUUID(owner);
+         if (player != null) {
+            int id = player.getEntityId();
 
+            if (ownerEntityId == null || ownerEntityId != id) {
+               ownerEntityId = id;
+
+               net.minecraft.block.state.IBlockState state = world.getBlockState(pos);
+               world.notifyBlockUpdate(pos, state, state, 2);
+            }
+         }
+      }
    }
 
    private void searchOtherMarkers() {
@@ -139,11 +170,11 @@
 
          for(int i = 0; i < arailmap.length; ++i) {
             RailPosition railposition = this.railMaps[i].getStartRP();
             RailPosition railposition1 = this.railMaps[i].getEndRP();
             railposition1.cantCenter = -railposition.cantCenter;
-            arailmap[i] = new RailMapBasic(railposition, railposition1);
+            arailmap[i] = new RailMapBasic(railposition, railposition1, RailMapBasic.fixRTMRailMapVersionCurrent);
          }
 
          this.railMaps = arailmap;
          this.linePos = (float[][][])null;
          this.createGrids();
@@ -171,26 +202,26 @@
       } else if (list.size() == 2) {
          if (list.get(0) != null && list.get(1) != null) {
             RailPosition railposition2 = this.getMarkerRP((BlockPos)list.get(0));
             RailPosition railposition3 = this.getMarkerRP((BlockPos)list.get(1));
             if (railposition2 != null && railposition3 != null) {
-               RailMap railmap1 = new RailMapBasic(railposition2, railposition3);
+               RailMap railmap1 = new RailMapBasic(railposition2, railposition3, RailMapBasic.fixRTMRailMapVersionCurrent);
                this.railMaps = new RailMap[]{railmap1};
                blockpos = new BlockPos(railposition2.blockX, railposition2.blockY, railposition2.blockZ);
             }
          }
       } else {
-         List<RailPosition> list = new ArrayList<>();
+         List<RailPosition> list3 = new ArrayList<>();
 
          for(BlockPos blockpos2 : list) {
             RailPosition railposition1 = this.getMarkerRP(blockpos2);
             if (railposition1 != null) {
-               list.add(railposition1);
+               list3.add(railposition1);
             }
          }
 
-         SwitchType switchtype = (new RailMaker(this.getWorld(), list)).getSwitch();
+         SwitchType switchtype = (new RailMaker(this.getWorld(), list3, RailMapBasic.fixRTMRailMapVersionCurrent)).getSwitch();
          if (switchtype != null) {
             this.railMaps = switchtype.getAllRailMap();
             if (this.railMaps != null) {
                RailPosition railposition4 = this.railMaps[0].getStartRP();
                blockpos = new BlockPos(railposition4.blockX, railposition4.blockY, railposition4.blockZ);
@@ -223,11 +254,11 @@
       }
 
    }
 
    private void setStartPos(BlockPos pos, RailMap[] maps) {
-      NGTLog.debug("[Marker] Start pos %s", new Object[]{pos.toString()});
+      NGTLog.debug("[Marker] Start pos %s for %s", pos.toString(), this.getPos());
       this.startPos = pos;
       this.railMaps = maps;
       if (!this.isCoreMarker()) {
          this.markerPosList.clear();
          this.grid = null;
@@ -302,6 +333,10 @@
 
    public String getStateString(MarkerState state) {
       boolean flag = state.get(this.markerState);
       return String.format("%s : %s", state.toString(), flag ? "ON" : "OFF");
    }
+
+   public Integer getOwnerEntityId() {
+      return ownerEntityId;
+   }
 }
