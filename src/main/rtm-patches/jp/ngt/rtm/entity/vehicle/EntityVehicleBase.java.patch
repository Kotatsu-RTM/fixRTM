--- a/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
+++ b/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
@@ -1,9 +1,16 @@
 package jp.ngt.rtm.entity.vehicle;
 
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
+import java.util.stream.Collectors;
+
+import com.anatawa12.fixRtm.network.NetworkHandler;
+import com.anatawa12.fixRtm.network.NotifyUntracked;
+import com.anatawa12.fixRtm.network.PacketEntityLoaded;
+import com.anatawa12.fixRtm.rtm.entity.vehicle.EntityVehicleBaseKt;
+import com.anatawa12.fixRtm.rtm.world.NewChunkManager;
+import com.google.common.primitives.Ints;
 import jp.ngt.ngtlib.entity.EntityCustom;
 import jp.ngt.ngtlib.math.NGTMath;
 import jp.ngt.ngtlib.math.PooledVec3;
 import jp.ngt.ngtlib.math.Vec3;
 import jp.ngt.ngtlib.network.PacketNBT;
@@ -20,31 +27,35 @@
 import jp.ngt.rtm.modelpack.modelset.ModelSetVehicleBase;
 import jp.ngt.rtm.modelpack.state.ResourceState;
 import jp.ngt.rtm.network.PacketSetTrainState;
 import jp.ngt.rtm.network.PacketVehicleMovement;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.MoverType;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.apache.commons.lang3.ArrayUtils;
 
 public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends EntityCustom implements IResourceSelector {
    public static final int MAX_SEAT_ROTATION = 45;
    public static final int MAX_DOOR_MOVE = 60;
    public static final int MAX_PANTOGRAPH_MOVE = 40;
    public static final float TO_ANGULAR_VELOCITY = 114.59156F;
    private ResourceState<T> state = new ResourceState<>(this.getSubType(), this);
    private ScriptExecuter executer = new ScriptExecuter();
-   protected List<EntityFloor> vehicleFloors = new ArrayList();
+   private Set<UUID> floorUuids = new HashSet<>();
+   private List<Integer> floorIds = new ArrayList<>();
+   private WeatherEffectDummy weatherEffectDummy;
    protected final IUpdateVehicle soundUpdater;
    private boolean floorLoaded;
    private boolean tracked;
-   private EntityLivingBase rider;
    public float rotationRoll;
    public float prevRotationRoll;
    @SideOnly(Side.CLIENT)
    public int seatRotation;
    @SideOnly(Side.CLIENT)
@@ -85,13 +96,10 @@
          setRenderDistanceWeight(16.0D);
       }
 
       this.preventEntitySpawning = true;
       this.soundUpdater = world != null ? RTMCore.proxy.getSoundUpdater(this) : null;
-      if (world.isRemote) {
-         world.addWeatherEffect(new WeatherEffectDummy(world, this));
-      }
 
       for(TrainState.TrainStateType trainstate$trainstatetype : TrainState.TrainStateType.values()) {
          this.setVehicleState(trainstate$trainstatetype, trainstate$trainstatetype.min);
       }
 
@@ -100,18 +108,34 @@
    protected void entityInit() {
    }
 
    protected void writeEntityToNBT(NBTTagCompound nbt) {
       nbt.setTag("State", this.getResourceState().writeToNBT());
+
+      if (!world.isRemote) {
+         nbt.setIntArray("chunks", EntityVehicleBaseKt.getChunkPosArray(this));
+         nbt.setByteArray("vehicleFloorUuids", EntityVehicleBaseKt.uuidsToByteArray(new ArrayList<>(floorUuids)));
+         nbt.setIntArray("vehicleFloorEntityIds", ArrayUtils.toPrimitive(floorIds.toArray(new Integer[0])));
+      }
    }
 
    protected void readEntityFromNBT(NBTTagCompound nbt) {
       this.getResourceState().readFromNBT(nbt.getCompoundTag("State"));
+
+      if (world.isRemote && nbt.hasKey("vehicleFloorEntityIds")) {
+         floorIds.clear();
+         floorIds.addAll(Ints.asList(nbt.getIntArray("vehicleFloorEntityIds")));
+      }
+
+      if (!world.isRemote && nbt.hasKey("chunks") && nbt.hasKey("vehicleFloorUuids")) {
+         NewChunkManager.INSTANCE.loadChunks(this, EntityVehicleBaseKt.intArrayToChunks(nbt.getIntArray("chunks")));
+         floorUuids.addAll(EntityVehicleBaseKt.byteArrayToUuidList(nbt.getByteArray("vehicleFloorUuids")));
+      }
+
       if (this.world != null && this.world.isRemote) {
          this.updateResourceState();
       }
-
    }
 
    public boolean shouldRenderInPass(int pass) {
       return pass >= 0;
    }
@@ -138,26 +162,35 @@
 
    public void syncData() {
       this.updateResourceState();
    }
 
+   public List<EntityFloor> getFloors() {
+      return floorIds.stream()
+         .map(it -> world.getEntityByID(it))
+         .filter(Objects::nonNull)
+         .filter(it -> it instanceof EntityFloor)
+         .map(it -> (EntityFloor) it)
+         .collect(Collectors.toList());
+   }
+
    public void setFloor(EntityFloor par1) {
-      this.vehicleFloors.add(par1);
+      floorUuids.add(par1.getUniqueID());
+      floorIds.add(par1.getEntityId());
    }
 
    public void setDead() {
       super.setDead();
-      if (!this.world.isRemote) {
-         for(EntityFloor entityfloor : this.vehicleFloors) {
-            if (entityfloor != null) {
-               entityfloor.setDead();
-            }
-         }
 
+      if (!world.isRemote) {
+         floorUuids.stream()
+            .map(it -> ((WorldServer) world).getEntityFromUuid(it))
+            .filter(Objects::nonNull)
+            .forEach(Entity::setDead);
+
          RTMCore.NETWORK_WRAPPER.sendToAll(new PacketVehicleMovement(this, true));
       }
-
    }
 
    public final void onUpdate() {
       this.onVehicleUpdate();
    }
@@ -179,19 +212,10 @@
 
          if (!this.floorLoaded) {
             this.setupFloors();
          }
 
-         Entity entity = this.getFirstPassenger();
-         if (entity != null) {
-            if (this.rider == null && entity instanceof EntityLivingBase) {
-               this.rider = (EntityLivingBase)entity;
-            }
-         } else if (this.rider != null) {
-            this.rider = null;
-         }
-
          this.executer.execScript(this);
          this.updateBlockCollisionState();
          this.updateEntityCollisionState();
          this.updateFallState();
          this.updateMovement();
@@ -268,11 +292,10 @@
 
       try {
          ModelSetBase modelsetbase = this.getResourceState().getResourceSet();
          axisalignedbb = modelsetbase.getCollisionObj().getSizeBox();
       } catch (NullPointerException nullpointerexception) {
-         nullpointerexception.printStackTrace();
       }
 
       if (axisalignedbb == null) {
          axisalignedbb = new AxisAlignedBB(-1.5D, 0.0D, -2.0D, 1.5D, 3.0D, 2.0D);
       }
@@ -310,23 +333,29 @@
 
       return y;
    }
 
    public void updatePassenger(Entity passenger) {
-      if (this.isPassenger(passenger)) {
-         Vec3 vec3 = this.getRiderPos(passenger);
-         vec3 = vec3.rotateAroundZ(-this.rotationRoll);
-         vec3 = vec3.rotateAroundX(this.rotationPitch);
-         vec3 = vec3.rotateAroundY(this.rotationYaw);
-         double d0 = this.posX + vec3.getX();
-         double d1 = this.posY + vec3.getY();
-         double d2 = this.posZ + vec3.getZ();
-         passenger.setPosition(d0, d1, d2);
-         passenger.rotationYaw -= NGTMath.wrapAngle(this.rotationYaw - this.prevRotationYaw);
-         passenger.rotationPitch -= NGTMath.wrapAngle(this.rotationPitch - this.prevRotationPitch);
-      }
+      if (!this.isPassenger(passenger) || !(passenger instanceof EntityPlayer)) return;
+
+      EntityPlayer player = ((EntityPlayer) passenger);
 
+      Vec3 vec3 = this.getRiderPos(player);
+      vec3 = vec3.rotateAroundZ(-this.rotationRoll);
+      vec3 = vec3.rotateAroundX(this.rotationPitch);
+      vec3 = vec3.rotateAroundY(this.rotationYaw);
+      double d0 = this.posX + vec3.getX();
+      double d1 = this.posY + vec3.getY();
+      double d2 = this.posZ + vec3.getZ();
+      player.setPosition(d0, d1, d2);
+
+      float yaw = MathHelper.wrapDegrees(this.rotationYaw - this.prevRotationYaw);
+      float pitch = MathHelper.wrapDegrees(this.rotationPitch - this.prevRotationPitch);
+
+      player.renderYawOffset -= yaw;
+      player.rotationYaw -= yaw;
+      player.rotationPitch -= pitch;
    }
 
    public Vec3 getRiderPos(Entity passenger) {
       float[] afloat = this.getResourceState().getResourceSet().getConfig().getPlayerPos()[this.getRiderPosIndex()];
       return PooledVec3.create((double)afloat[0], (double)afloat[1] + passenger.getYOffset(), (double)afloat[2]);
@@ -371,25 +400,25 @@
    @SideOnly(Side.CLIENT)
    protected void updateAnimation() {
       ModelSetVehicleBase modelsetvehiclebase = this.getResourceState().getResourceSet();
       VehicleBaseConfig vehiclebaseconfig = modelsetvehiclebase.getConfig();
       float f = this.getSpeed();
-      float f1 = f * 114.59156F * vehiclebaseconfig.wheelRotationSpeed * this.getMoveDir();
+      float f1 = f * TO_ANGULAR_VELOCITY * vehiclebaseconfig.wheelRotationSpeed * this.getMoveDir();
       this.wheelRotationR = (this.wheelRotationR + f1) % 360.0F;
       this.wheelRotationL = (this.wheelRotationL + f1) % 360.0F;
       int i = this.getVehicleState(TrainState.TrainStateType.Door);
       boolean flag = (i & 1) == 1;
       this.doorMoveR = this.updateDoorAnimation(modelsetvehiclebase, flag, this.doorMoveR);
       boolean flag1 = (i & 2) == 2;
       this.doorMoveL = this.updateDoorAnimation(modelsetvehiclebase, flag1, this.doorMoveL);
       int j = this.getVehicleState(TrainState.TrainStateType.Pantograph);
       if (j == TrainState.Pantograph_Down.data) {
-         if (this.pantograph_F < 40) {
+         if (this.pantograph_F < MAX_PANTOGRAPH_MOVE) {
             ++this.pantograph_F;
          }
 
-         if (this.pantograph_B < 40) {
+         if (this.pantograph_B < MAX_PANTOGRAPH_MOVE) {
             ++this.pantograph_B;
          }
       } else {
          int[] aint = this.getPantographMaxHeight();
          if (this.pantograph_F > aint[0]) {
@@ -417,28 +446,28 @@
       this.rollsignV = par1 * 16;
    }
 
    @SideOnly(Side.CLIENT)
    public float getSeatRotation() {
-      return (float)this.seatRotation / 45.0F;
+      return (float)this.seatRotation / MAX_SEAT_ROTATION;
    }
 
    protected int[] getPantographMaxHeight() {
       return new int[]{0, 0};
    }
 
    protected int updateDoorAnimation(ModelSetVehicleBase modelSet, boolean isOpen, int move) {
       if (isOpen) {
-         if (move < 60) {
+         if (move < MAX_DOOR_MOVE) {
             if (move == 0) {
                RTMCore.proxy.playSound(this, modelSet.getConfig().sound_DoorOpen, 1.0F, 1.0F);
             }
 
             ++move;
          }
       } else if (move > 0) {
-         if (move == 60) {
+         if (move == MAX_DOOR_MOVE) {
             RTMCore.proxy.playSound(this, modelSet.getConfig().sound_DoorClose, 1.0F, 1.0F);
          }
 
          --move;
       }
@@ -449,30 +478,43 @@
    public float getMoveDir() {
       return 1.0F;
    }
 
    private void setupFloors() {
-      for(EntityFloor entityfloor : this.vehicleFloors) {
-         if (entityfloor != null) {
-            entityfloor.setDead();
-         }
-      }
+      if (!(world instanceof WorldServer))
+         throw new IllegalStateException("EntityVehicleBase#setupFloors must not be called from client thread");
+
+      floorUuids.stream()
+         .map(it -> ((WorldServer)world).getEntityFromUuid(it))
+         .filter(Objects::nonNull)
+         .filter(it -> it instanceof EntityFloor)
+         .forEach(Entity::setDead);
+
+      floorUuids.clear();
+      floorIds.clear();
+
+      T resourceSet = getResourceState().getResourceSet();
+
+      floorLoaded = true;
 
-      T t = this.getResourceState().getResourceSet();
-      this.floorLoaded = true;
+      for (float[] slotPos : resourceSet.getConfig().getSlotPos()) {
+         EntityFloor floor =
+            new EntityFloor(
+               world,
+               this,
+               new float[] {slotPos[0], slotPos[1] + getVehicleYOffset(), slotPos[2]},
+               (byte) slotPos[3]
+            );
 
-      for(int i = 0; i < t.getConfig().getSlotPos().length; ++i) {
-         float[] afloat = t.getConfig().getSlotPos()[i];
-         EntityFloor entityfloor1 = new EntityFloor(this.world, this, new float[]{afloat[0], afloat[1] + this.getVehicleYOffset(), afloat[2]}, (byte)((int)afloat[3]));
-         if (!this.world.spawnEntity(entityfloor1)) {
-            this.floorLoaded = false;
+         if (!world.spawnEntity(floor)) {
+            floorLoaded = false;
             break;
          }
 
-         this.vehicleFloors.add(entityfloor1);
+         floorUuids.add(floor.getUniqueID());
+         floorIds.add(floor.getEntityId());
       }
-
    }
 
    public String getName() {
       return this.getResourceState().getName();
    }
@@ -532,21 +574,50 @@
    public void setTrainStateData(int id, byte data) {
       this.setVehicleState(TrainState.getStateType(id), data);
    }
 
    public byte getVehicleState(TrainState.TrainStateType type) {
-      return (byte)this.getResourceState().getDataMap().getInt(type.toString());
+      return type.clap((byte)this.getResourceState().getDataMap().getInt(type.toString()), this);
    }
 
    public void setVehicleState(TrainState.TrainStateType type, byte data) {
-      this.getResourceState().getDataMap().setInt(type.toString(), data, 3);
+      this.getResourceState().getDataMap().setInt(type.toString(), type.clap(data, this), 3);
    }
 
    @SideOnly(Side.CLIENT)
    public void syncVehicleState(TrainState.TrainStateType type, byte data) {
       RTMCore.NETWORK_WRAPPER.sendToServer(new PacketSetTrainState(this, type, data));
    }
 
    public VehicleNGTO getNGTO() {
       return null;
    }
+
+   @Override
+   public void onRemovedFromWorld() {
+      super.onRemovedFromWorld();
+
+      if (world.isRemote) {
+         if (weatherEffectDummy != null) weatherEffectDummy.setDead();
+         NetworkHandler.sendPacketServer(new NotifyUntracked(getEntityId()));
+      }
+   }
+
+   @Override
+    public void addEntityCrashInfo(net.minecraft.crash.CrashReportCategory category) {
+        super.addEntityCrashInfo(category);
+        com.anatawa12.fixRtm.rtm.entity.vehicle.EntityVehicleBaseKt.addEntityCrashInfo(this, category);
+    }
+
+   @Override
+   public void onAddedToWorld() {
+      super.onAddedToWorld();
+
+      if (!world.isRemote) {
+         setupFloors();
+      } else {
+         weatherEffectDummy = new WeatherEffectDummy(world, this);
+         world.addWeatherEffect(weatherEffectDummy);
+         NetworkHandler.sendPacketServer(new PacketEntityLoaded(getEntityId()));
+      }
+   }
 }
