--- a/jp/ngt/rtm/entity/train/util/TrainState.java
+++ b/jp/ngt/rtm/entity/train/util/TrainState.java
@@ -47,20 +47,37 @@
       return TrainState.TrainStateType.Door;
    }
 
    public static enum TrainStateType {
       Direction(0, "train_dir", 0, 1),
-      Notch(1, "notch", -8, 5),
+      Notch(1, "notch", -8, 5) {
+         @Override
+         protected byte getMin0(jp.ngt.rtm.entity.vehicle.EntityVehicleBase<?> train) {
+            jp.ngt.rtm.modelpack.cfg.VehicleBaseConfig config = train.getResourceState().getResourceSet().getConfig();
+            if (config instanceof jp.ngt.rtm.modelpack.cfg.TrainConfig)
+               return (byte) -(((jp.ngt.rtm.modelpack.cfg.TrainConfig)config).deccelerations.length - 1);
+            return super.getMin0(train);
+         }
+
+         @Override
+         protected byte getMax0(jp.ngt.rtm.entity.vehicle.EntityVehicleBase<?> train) {
+            jp.ngt.rtm.modelpack.cfg.VehicleBaseConfig config = train.getResourceState().getResourceSet().getConfig();
+            if (config instanceof jp.ngt.rtm.modelpack.cfg.TrainConfig)
+               return (byte) ((jp.ngt.rtm.modelpack.cfg.TrainConfig) config).accelerateions.length;
+            return super.getMin0(train);
+         }
+      },
       Signal(2, "signal", 0, 127),
       Door(4, "door", 0, 3),
       Light(5, "light", 0, 2),
       Pantograph(6, "pantograph", 0, 1),
       ChunkLoader(7, "chunk_loader", 0, 8),
       Destination(8, "destination", 0, 127),
       Announcement(9, "announcement", 0, 127),
       Role(10, "direction", 0, 2),
-      InteriorLight(11, "interior_light", 0, 2);
+      InteriorLight(11, "interior_light", 0, 2),
+      AutoLinking(12, "auto_linking", 0, 1);
 
       public final int id;
       public final String stateName;
       public final byte min;
       public final byte max;
@@ -79,7 +96,41 @@
             }
          }
 
          return Direction;
       }
+
+      public byte clap(byte value, jp.ngt.rtm.entity.vehicle.EntityVehicleBase<?> train) {
+         byte min = getMin(train);
+         byte max = getMax(train);
+         return value < min ? min
+            : value > max ? max
+            : value;
+      }
+
+      public byte getMax(jp.ngt.rtm.entity.vehicle.EntityVehicleBase<?> train) {
+         try {
+            return getMax0(train);
+         } catch (Throwable t) {
+            t.printStackTrace();
+            return max;
+         }
+      }
+
+      protected byte getMax0(jp.ngt.rtm.entity.vehicle.EntityVehicleBase<?> train) {
+         return max;
+      }
+
+      public byte getMin(jp.ngt.rtm.entity.vehicle.EntityVehicleBase<?> train) {
+         try {
+            return getMin0(train);
+         } catch (Throwable t) {
+            t.printStackTrace();
+            return min;
+         }
+      }
+
+      protected byte getMin0(jp.ngt.rtm.entity.vehicle.EntityVehicleBase<?> train) {
+         return min;
+      }
    }
 }
