--- a/jp/ngt/rtm/entity/train/EntityTrainBase.java
+++ b/jp/ngt/rtm/entity/train/EntityTrainBase.java
@@ -1,10 +1,10 @@
 package jp.ngt.rtm.entity.train;
 
-import java.util.HashSet;
 import java.util.Random;
-import java.util.Set;
+
+import com.anatawa12.fixRtm.rtm.world.NewChunkManager;
 import jp.ngt.ngtlib.io.NGTLog;
 import jp.ngt.ngtlib.math.NGTMath;
 import jp.ngt.ngtlib.math.PooledVec3;
 import jp.ngt.ngtlib.math.Vec3;
 import jp.ngt.ngtlib.renderer.NGTParticle;
@@ -29,11 +29,10 @@
 import jp.ngt.rtm.modelpack.modelset.ModelSetVehicleBase;
 import jp.ngt.rtm.network.PacketNotice;
 import jp.ngt.rtm.rail.TileEntityLargeRailBase;
 import jp.ngt.rtm.rail.TileEntityLargeRailCore;
 import jp.ngt.rtm.world.IChunkLoader;
-import jp.ngt.rtm.world.RTMChunkManager;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.MoverType;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
@@ -42,41 +41,37 @@
 import net.minecraft.network.datasync.EntityDataManager;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.math.AxisAlignedBB;
-import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.world.World;
-import net.minecraftforge.common.ForgeChunkManager;
-import net.minecraftforge.common.ForgeChunkManager.Ticket;
-import net.minecraftforge.common.ForgeChunkManager.Type;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> implements IChunkLoader {
    private static final DataParameter<Integer> BOGIE_ID0 = EntityDataManager.createKey(EntityTrainBase.class, DataSerializers.VARINT);
    private static final DataParameter<Integer> BOGIE_ID1 = EntityDataManager.createKey(EntityTrainBase.class, DataSerializers.VARINT);
+   private static final DataParameter<Float> TRAIN_SPEED = EntityDataManager.createKey(EntityTrainBase.class, DataSerializers.FLOAT);
+   private static final DataParameter<Boolean> CAB_DIRECTION = EntityDataManager.createKey(EntityTrainBase.class, DataSerializers.BOOLEAN);
    public static final short MAX_AIR_COUNT = 2880;
    public static final short MIN_AIR_COUNT = 2480;
    public static final float TRAIN_WIDTH = 2.75F;
    public static final float TRAIN_HEIGHT = 1.1875F;
-   public final BogieController bogieController = new BogieController();
+   public final BogieController bogieController = new BogieController(world);
    private Formation formation;
-   private float trainSpeed;
    public int brakeCount = 72;
    public int atsCount;
    public boolean onRail = true;
    public int brakeAirCount = 2880;
    public boolean complessorActive;
    private float wave;
    private static final int[] PANTO_POS_ZERO = new int[]{0, 0};
-   private Ticket ticket;
-   private final Set<ChunkPos> loadedChunks = new HashSet();
-   private int prevChunkCoordX;
-   private int prevChunkCoordZ;
 
+   private NBTTagCompound waitingFormationData;
+   private boolean autoLinkingState;
+
    public EntityTrainBase(World world) {
       super(world);
       this.setSize(2.75F, 1.1875F);
       this.noClip = true;
    }
@@ -92,51 +87,69 @@
 
    protected void entityInit() {
       super.entityInit();
       this.getDataManager().register(BOGIE_ID0, 0);
       this.getDataManager().register(BOGIE_ID1, 0);
+      this.getDataManager().register(TRAIN_SPEED, 0.0f);
+      this.getDataManager().register(CAB_DIRECTION, false);
    }
 
    protected void writeEntityToNBT(NBTTagCompound nbt) {
       super.writeEntityToNBT(nbt);
-      NBTTagCompound nbttagcompound = new NBTTagCompound();
-      this.writeFormationData(nbttagcompound);
-      nbt.setTag("FormationEntry", nbttagcompound);
+
+      if (waitingFormationData == null) {
+         NBTTagCompound nbttagcompound = new NBTTagCompound();
+         this.writeFormationData(nbttagcompound);
+         nbt.setTag("FormationEntry", nbttagcompound);
+      } else {
+         nbt.setTag("FormationEntry", waitingFormationData);
+      }
+
       nbt.setInteger("trainDir", this.getTrainDirection());
+      nbt.setBoolean("cabDir", this.getDataManager().get(CAB_DIRECTION));
    }
 
    private void writeFormationData(NBTTagCompound nbt) {
       if (this.formation != null) {
          FormationEntry formationentry = this.formation.getEntry(this);
          if (formationentry != null) {
             nbt.setLong("FormationId", this.formation.id);
             nbt.setByte("EntryPos", formationentry.entryId);
             nbt.setByte("EntryDir", formationentry.dir);
          }
-
       }
    }
 
    protected void readEntityFromNBT(NBTTagCompound nbt) {
       super.readEntityFromNBT(nbt);
       NBTTagCompound nbttagcompound = nbt.getCompoundTag("FormationEntry");
       this.readFormationData(nbttagcompound);
       this.setTrainDirection(nbt.getInteger("trainDir"));
+      this.getDataManager().set(CAB_DIRECTION, nbt.getBoolean("cabDir"));
    }
 
-   private void readFormationData(NBTTagCompound nbt) {
+   private boolean readFormationData(NBTTagCompound nbt) {
+      if (!FormationManager.getInstance().isLoaded()) {
+         waitingFormationData = nbt;
+         return false;
+      }
+
       long i = nbt.getLong("FormationId");
       byte b0 = nbt.getByte("EntryPos");
       byte b1 = nbt.getByte("EntryDir");
       Formation formation = FormationManager.getInstance().getFormation(i);
-      if (formation == null) {
+      if (formation == null) { // temporally set new formation
          this.formation = FormationManager.getInstance().createNewFormation(this);
+         if (!jp.ngt.ngtlib.util.NGTUtil.isServer()) {
+            com.anatawa12.fixRtm.network.NetworkHandler.sendPacketServer(new com.anatawa12.fixRtm.network.RequestFormation(i));
+         }
       } else {
          this.formation = formation;
          formation.setTrain(this, b0, b1);
       }
 
+      return true;
    }
 
    public Entity[] getParts() {
       return null;
    }
@@ -150,34 +163,43 @@
    }
 
    public void setDead() {
       super.setDead();
       if (!this.world.isRemote) {
-         this.releaseTicket();
+         NewChunkManager.INSTANCE.removeEntity(this);
          this.bogieController.setDead(this);
 
          try {
+            if (formation == null) {
+               readFormationData(waitingFormationData);
+               waitingFormationData = null;
+            }
             this.formation.onRemovedTrain(this);
          } catch (IndexOutOfBoundsException indexoutofboundsexception) {
             indexoutofboundsexception.printStackTrace();
          }
       }
 
    }
 
    public void onVehicleUpdate() {
+      if (waitingFormationData != null && readFormationData(waitingFormationData)) {
+         waitingFormationData = null;
+      }
+
       this.updateSpeed();
       if (this.existBogies()) {
          this.bogieController.updateBogies(this);
       }
 
       super.onVehicleUpdate();
       if (this.world.isRemote) {
          this.spawnSmoke();
       } else {
-         this.updateChunks();
+         NewChunkManager.INSTANCE.updateChunks(this);
          this.updateATS();
+         this.updateAutoLinkingState();
       }
 
    }
 
    protected void updateFallState() {
@@ -293,25 +315,25 @@
          float f = this.getSpeed();
          int i = this.getNotch();
          Random random = this.world.rand;
 
          for(int j = 0; j < (modelsettrain.getConfig()).smoke.length; ++j) {
-            Vec3 vec3 = PooledVec3.create((modelsettrain.getConfig()).smoke[j][0], (modelsettrain.getConfig()).smoke[j][1], (modelsettrain.getConfig()).smoke[j][2]);
+            Vec3 vec3 = PooledVec3.create((double) (modelsettrain.getConfig()).smoke[j][0], (double) (modelsettrain.getConfig()).smoke[j][1], (double) (modelsettrain.getConfig()).smoke[j][2]);
             vec3 = vec3.rotateAroundX(this.rotationPitch);
             vec3 = vec3.rotateAroundY(this.rotationYaw);
-            double d0 = (modelsettrain.getConfig()).smoke[j][4];
-            double d1 = (modelsettrain.getConfig()).smoke[j][5];
+            double d0 = (double) (modelsettrain.getConfig()).smoke[j][4];
+            double d1 = (double) (modelsettrain.getConfig()).smoke[j][5];
             int k = f > 0.05F ? (int)d1 : (i > 0 ? (int)d0 + 3 : (int)d0);
             EnumParticleTypes enumparticletypes = NGTParticle.getParticle((String)(modelsettrain.getConfig()).smoke[j][3]);
 
             for(int l = 0; l < k; ++l) {
                double d2 = this.posX + vec3.getX() + (double)random.nextFloat() * 0.5D - 0.25D;
                double d3 = this.posY + vec3.getY() + (double)this.getVehicleYOffset();
                double d4 = this.posZ + vec3.getZ() + (double)random.nextFloat() * 0.5D - 0.25D;
                double d5 = 0.0625D;
                if ((modelsettrain.getConfig()).smoke.length == 7) {
-                  d5 = (modelsettrain.getConfig()).smoke[j][6];
+                  d5 = (double) (modelsettrain.getConfig()).smoke[j][6];
                }
 
                double d6 = (random.nextDouble() * 2.0D - 1.0D) * d5;
                double d7 = (random.nextDouble() * 2.0D - 1.0D) * d5;
                this.world.spawnParticle(enumparticletypes, d2, d3, d4, d6, 0.25D, d7, new int[0]);
@@ -409,63 +431,11 @@
       }
 
    }
 
    protected void updateSpeed() {
-      if (this.onRail) {
-         int i = this.getNotch();
-         Entity entity = this.getFirstPassenger();
-         if ((entity == null || !(entity instanceof EntityPlayer) && !(entity instanceof EntityMotorman)) && i > 0) {
-         }
-
-         boolean flag = true;
-         float f = this.getSpeed();
-         if (i < 0) {
-            int j = i < 0 ? i * -18 : 0;
-            if (this.brakeCount < j) {
-               ++this.brakeCount;
-               if (this.world.isRemote) {
-                  --this.brakeAirCount;
-               }
-            } else if (this.brakeCount > j) {
-               this.brakeCount -= this.brakeCount - j > 1 ? 2 : 1;
-            }
-         } else if (i >= 0) {
-            if (this.brakeCount > 0) {
-               if (f <= 0.0F) {
-                  flag = false;
-               }
-
-               this.brakeCount -= 2;
-            } else if (this.brakeCount < 0) {
-               this.brakeCount = 0;
-            }
-         }
-
-         if (this.isControlCar() && flag && !this.world.isRemote) {
-            ModelSetTrain modelsettrain = this.getResourceState().getResourceSet();
-            float f1 = EnumNotch.getAcceleration(i, f, modelsettrain.getConfig());
-            if (i >= 0) {
-               float f2;
-               if (this.rotationPitch == 0.0F) {
-                  float f3 = 2.0E-4F;
-                  f2 = f > 0.0F ? f3 : (f < 0.0F ? -f3 : 0.0F);
-               } else {
-                  float f5 = 0.0125F;
-                  float f4 = this.getTrainDirection() == 0 ? f5 : -f5;
-                  f2 = NGTMath.sin(this.rotationPitch) * f4;
-               }
-
-               f = f + (f1 - f2);
-            } else {
-               f = f + (f > 0.0F ? f1 : (f < 0.0F ? -f1 : 0.0F));
-            }
-
-            this.setSpeed(f);
-         }
-
-      }
+      com.anatawa12.fixRtm.rtm.entity.train.EntityTrainBaseKt.updateSpeed(this);
    }
 
    public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch) {
       this.setPosition(x, y, z);
       this.setRotation(yaw, pitch);
@@ -506,11 +476,11 @@
    public Vec3 getRiderPos(Entity passenger) {
       return super.getRiderPos(passenger).add(0.0D, this.getMountedYOffset(), 0.0D);
    }
 
    protected int getRiderPosIndex() {
-      return this.getTrainDirection();
+      return this.getCabDirection();
    }
 
    public double getMountedYOffset() {
       return (double)(this.height + 1.1875F - 0.93F);
    }
@@ -565,16 +535,25 @@
 
          return true;
       }
    }
 
-   protected void concatenation(EntityBogie bogie, EntityPlayer player) {
+   public void concatenation(EntityBogie bogie, EntityPlayer player) {
       int i = bogie.getBogieId();
       if (i >= 0) {
          if (this.getConnectedTrain(i) == null) {
             bogie.isActivated = true;
-            NGTLog.sendChatMessage(player, "message.train.concatenation_mode", new Object[0]);
+            if (player.isSneaking()) {
+               this.setTrainDirection(i);
+               this.setCabDirection(i);
+               this.setVehicleState(TrainState.TrainStateType.Role, (byte) 0);
+               this.setVehicleState(TrainState.TrainStateType.AutoLinking, (byte) 1);
+               this.setNotch(1);
+               NGTLog.sendChatMessage(player, "fix-rtm.rtm.message.train.auto_concatenation_mode", new Object[0]);
+            } else {
+               NGTLog.sendChatMessage(player, "message.train.concatenation_mode", new Object[0]);
+            }
          } else {
             this.formation.onDisconnectedTrain(this, i);
             NGTLog.sendChatMessage(player, "message.train.deconcatenation", new Object[0]);
          }
       }
@@ -583,25 +562,42 @@
 
    protected void mountMotorman(EntityBogie bogie, EntityPlayer player, ItemStack stack) {
       int i = bogie.getBogieId();
       if (i >= 0) {
          EntityMotorman entitymotorman = new EntityMotorman(this.world, player);
-         entitymotorman.setLocationAndAngles(this.posX, this.posY, this.posZ, 0.0F, 0.0F);
+
+         Vec3 vec3 = this.getRiderPos(entitymotorman)
+            .rotateAroundZ(-this.rotationRoll)
+            .rotateAroundX(this.rotationPitch)
+            .rotateAroundY(this.rotationYaw);
+         double posX = this.posX + vec3.getX();
+         double posY = this.posY + vec3.getY();
+         double posZ = this.posZ + vec3.getZ();
+
+         float yaw = (float) Math.toDegrees(Math.atan2(-(bogie.posX - this.posX), bogie.posZ - this.posZ));
+
+         entitymotorman.setPositionAndRotation(posX, posY, posZ, yaw, 0.0F);
+
          if (this.world.spawnEntity(entitymotorman)) {
             this.mountEntityToTrain(entitymotorman, i);
             stack.shrink(1);
          }
       }
 
    }
 
    private void mountEntityToTrain(Entity entity, int direction) {
-      if (this.getTrainDirection() != direction) {
-         this.setSpeed(-this.getSpeed());
+      if (this.isControlCar()) {
+         this.setTrainDirection(direction);
+         if (this.formation != null && this.formation.size() > 1) {
+            byte data = this.getVehicleState(TrainState.TrainStateType.Role);
+            byte newData = this.getCabDirection() == this.getTrainDirection() ? data : (byte) (data ^ 2);
+            this.setTrainStateData_NoSync(TrainState.TrainStateType.Role, newData);
+         }
       }
 
-      this.setTrainDirection(direction);
+      setCabDirection(direction);
       entity.startRiding(this);
    }
 
    protected void removePassengerFromVehicle(Entity passenger) {
       Entity entity = this.getBogie(this.getTrainDirection());
@@ -655,11 +651,11 @@
       if (!this.world.isRemote && par2.getTrain() != null) {
          int i = par1.getBogieId();
          int j = par2.getBogieId();
          if (i >= 0 && j >= 0 && this.getConnectedTrain(i) == null && par2.getTrain().formation != null) {
             this.formation.connectTrain(this, par2.getTrain(), i, j, par2.getTrain().formation);
-            RTMCore.proxy.playSound(par1, "block.anvil.place", 1.0F, 1.0F);
+            RTMCore.proxy.playSound(par1, "block.anvil.place", 2.0F, 1.0F);
             EntityPlayer entityplayer = null;
             if (this.getFirstPassenger() instanceof EntityPlayer) {
                entityplayer = (EntityPlayer)this.getFirstPassenger();
             } else if (par2.getTrain().getFirstPassenger() instanceof EntityPlayer) {
                entityplayer = (EntityPlayer)par2.getTrain().getFirstPassenger();
@@ -672,38 +668,38 @@
       }
 
    }
 
    public float getSpeed() {
-      return this.trainSpeed;
+      return this.getDataManager().get(TRAIN_SPEED);
    }
 
    public void setSpeed(float par1) {
       if (this.world.isRemote) {
-         this.trainSpeed = par1;
       } else if (this.isControlCar()) {
          this.formation.setSpeed(par1);
       }
 
    }
 
    public void setSpeed_NoSync(float par1) {
-      this.trainSpeed = par1;
+      this.getDataManager().set(TRAIN_SPEED, par1);
    }
 
    public void stopTrain(boolean changeSpeed) {
       if (this.formation != null) {
-         this.setNotch(-8);
+         this.setEmergencyBrake();
          if (changeSpeed) {
             this.setSpeed(0.0F);
          }
       }
 
    }
 
    public boolean isControlCar() {
-      return this.getVehicleState(TrainState.TrainStateType.Role) == TrainState.Role_Front.data;
+      byte role = this.getVehicleState(TrainState.TrainStateType.Role);
+      return role == TrainState.Role_Front.data || role == TrainState.Role_Back.data;
    }
 
    public boolean existBogies() {
       return this.getBogie(0) != null && this.getBogie(1) != null;
    }
@@ -755,15 +751,24 @@
 
    public void setFormation(Formation par1) {
       this.formation = par1;
    }
 
+   public int getCabDirection() {
+      return this.getDataManager().get(CAB_DIRECTION) ? 1 : 0;
+   }
+
+   private void setCabDirection(int direction) {
+      this.getDataManager().set(CAB_DIRECTION, direction != 0);
+   }
+
    public int getTrainDirection() {
       return this.getVehicleState(TrainState.TrainStateType.Direction);
    }
 
    public void setTrainDirection(int par1) {
+      par1 = TrainState.TrainStateType.Direction.clap((byte) par1, this);
       if (this.formation == null) {
          this.setTrainDirection_NoSync((byte)par1);
       } else {
          this.formation.setTrainDirection((byte)par1, this);
       }
@@ -793,33 +798,46 @@
    public boolean addNotch(Entity driver, int par2) {
       if (par2 != 0) {
          int i = this.getNotch();
          if (this.setNotch(i + par2)) {
             RTMCore.proxy.playSound(driver, "rtm:sounds/train/lever.ogg", 1.0F, 1.0F);
-            if (i < 0 && par2 > 0 && !this.world.isRemote) {
-               this.playBrakeReleaseSound(i == -1);
-            }
-
             return true;
          }
       }
 
       return false;
    }
 
    public boolean setNotch(int par1) {
-      if (this.isControlCar() && par1 <= 5 && par1 >= -8) {
+
+      if (this.isControlCar() && this.getResourceState().getResourceSet().getConfig().isNotchInRange(par1)) {
          int i = this.getNotch();
          if (i != par1) {
             super.setVehicleState(TrainState.TrainStateType.Notch, (byte)par1);
+
+            if (i < 0 && par1 - i > 0 && !this.world.isRemote) {
+               java.util.Arrays.stream(getFormation().entries)
+                  .filter(java.util.Objects::nonNull)
+                  .map(entry -> entry.train)
+                  .filter(java.util.Objects::nonNull)
+                  .forEach(train -> train.playBrakeReleaseSound(par1 >= 0));
+            }
             return true;
          }
       }
 
       return false;
    }
 
+   public void setEmergencyBrake() {
+      int prevNotch = this.getNotch();
+      int EB_NOTCH = -(this.getResourceState().getResourceSet().getConfig().deccelerations.length - 1);
+      if (prevNotch != EB_NOTCH) {
+         this.setVehicleState(jp.ngt.rtm.entity.train.util.TrainState.TrainStateType.Notch, (byte) EB_NOTCH);
+      }
+   }
+
    public int getSignal() {
       return this.getVehicleState(TrainState.TrainStateType.Signal);
    }
 
    public void setSignal(int par1) {
@@ -874,81 +892,49 @@
 
    public ItemStack getPickedResult(RayTraceResult target) {
       return ItemTrain.convertFormationAsItem(this);
    }
 
-   private void updateChunks() {
-      if (this.isChunkLoaderEnable()) {
-         this.forceChunkLoading();
-      } else {
-         this.releaseTicket();
-      }
-
-      this.prevChunkCoordX = this.chunkCoordX;
-      this.prevChunkCoordZ = this.chunkCoordZ;
-   }
-
    public boolean isChunkLoaderEnable() {
       return this.getVehicleState(TrainState.TrainStateType.ChunkLoader) > 0;
    }
 
-   private void releaseTicket() {
-      this.loadedChunks.clear();
-      if (this.ticket != null) {
-         ForgeChunkManager.releaseTicket(this.ticket);
-         this.ticket = null;
-      }
-
+   public boolean getAutoLinkingState() {
+      return autoLinkingState;
    }
 
-   private boolean requestTicket() {
-      Ticket ticket = RTMChunkManager.INSTANCE.getNewTicket(this.world, Type.ENTITY);
-      if (ticket != null) {
-         int i = this.getVehicleState(TrainState.TrainStateType.ChunkLoader);
-         ticket.getModData();
-         ticket.setChunkListDepth(i);
-         ticket.bindEntity(this);
-         this.setChunkTicket(ticket);
-         return true;
-      } else {
-         NGTLog.debug("[RTM] Failed to get ticket (Chunk Loader)");
-         return false;
-      }
+   public void setAutoLinkingState(boolean state) {
+      autoLinkingState = state;
    }
 
-   public void setChunkTicket(Ticket par1) {
-      if (this.ticket != par1) {
-         ForgeChunkManager.releaseTicket(this.ticket);
+   private void updateAutoLinkingState() {
+      if (!autoLinkingState) return;
+
+      if (getNotch() != 1) {
+         setVehicleState(TrainState.TrainStateType.AutoLinking, (byte) 0);
+         return;
       }
 
-      this.ticket = par1;
-   }
-
-   public void forceChunkLoading() {
-      this.forceChunkLoading(this.chunkCoordX, this.chunkCoordZ);
+      if (getSpeed() > 15.0F / 72) {
+         setNotch(0);
+         setVehicleState(TrainState.TrainStateType.AutoLinking, (byte) 0);
+      }
    }
 
-   public void forceChunkLoading(int x, int z) {
-      if (!this.world.isRemote) {
-         if (this.ticket == null && !this.requestTicket()) {
-            return;
-         }
+   @Override
+   public void onAddedToWorld() {
+      bogieController.setupBogies(this);
 
-         if (x != this.prevChunkCoordX || z != this.prevChunkCoordZ) {
-            this.setupChunks(x, z);
-         }
+      super.onAddedToWorld();
+   }
 
-         for(ChunkPos chunkpos : this.loadedChunks) {
-            ForgeChunkManager.forceChunk(this.ticket, chunkpos);
-         }
+   @Override
+   public void onRemovedFromWorld() {
+      super.onRemovedFromWorld();
 
-         ChunkPos chunkpos1 = new ChunkPos(x, z);
-         ForgeChunkManager.forceChunk(this.ticket, chunkpos1);
-      }
+      EntityBogie bogie0 = getBogie(0);
+      if (bogie0 != null) bogie0.setDead();
 
+      EntityBogie bogie1 = getBogie(1);
+      if (bogie1 != null) bogie1.setDead();
    }
-
-   private void setupChunks(int xChunk, int zChunk) {
-      int i = this.getVehicleState(TrainState.TrainStateType.ChunkLoader);
-      RTMChunkManager.INSTANCE.getChunksAround(this.loadedChunks, xChunk, zChunk, i);
-   }
 }
