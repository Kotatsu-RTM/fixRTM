--- a/jp/ngt/rtm/entity/train/EntityTrainBase.java
+++ b/jp/ngt/rtm/entity/train/EntityTrainBase.java
@@ -1,8 +1,7 @@
 package jp.ngt.rtm.entity.train;
 
-import java.util.HashSet;
 import java.util.Random;
 import java.util.Set;
 import jp.ngt.ngtlib.io.NGTLog;
 import jp.ngt.ngtlib.math.NGTMath;
 import jp.ngt.ngtlib.math.PooledVec3;
@@ -54,28 +53,31 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> implements IChunkLoader {
    private static final DataParameter<Integer> BOGIE_ID0 = EntityDataManager.createKey(EntityTrainBase.class, DataSerializers.VARINT);
    private static final DataParameter<Integer> BOGIE_ID1 = EntityDataManager.createKey(EntityTrainBase.class, DataSerializers.VARINT);
+   private static final DataParameter<Float> TRAIN_SPEED = EntityDataManager.createKey(EntityTrainBase.class, DataSerializers.FLOAT);
    public static final short MAX_AIR_COUNT = 2880;
    public static final short MIN_AIR_COUNT = 2480;
    public static final float TRAIN_WIDTH = 2.75F;
    public static final float TRAIN_HEIGHT = 1.1875F;
    public final BogieController bogieController = new BogieController();
    private Formation formation;
-   private float trainSpeed;
    public int brakeCount = 72;
    public int atsCount;
    public boolean onRail = true;
    public int brakeAirCount = 2880;
    public boolean complessorActive;
    private float wave;
    private static final int[] PANTO_POS_ZERO = new int[]{0, 0};
    private Ticket ticket;
-   private final Set<ChunkPos> loadedChunks = new HashSet();
+   private final Set<ChunkPos> loadedChunks = new java.util.LinkedHashSet<>();
    private int prevChunkCoordX;
    private int prevChunkCoordZ;
+   private int prevChunkLoaderRadius;
+
+   private boolean autoLinkingState;
 
    public EntityTrainBase(World world) {
       super(world);
       this.setSize(2.75F, 1.1875F);
       this.noClip = true;
@@ -92,10 +94,11 @@
 
    protected void entityInit() {
       super.entityInit();
       this.getDataManager().register(BOGIE_ID0, 0);
       this.getDataManager().register(BOGIE_ID1, 0);
+      this.getDataManager().register(TRAIN_SPEED, 0.0f);
    }
 
    protected void writeEntityToNBT(NBTTagCompound nbt) {
       super.writeEntityToNBT(nbt);
       NBTTagCompound nbttagcompound = new NBTTagCompound();
@@ -126,12 +129,15 @@
    private void readFormationData(NBTTagCompound nbt) {
       long i = nbt.getLong("FormationId");
       byte b0 = nbt.getByte("EntryPos");
       byte b1 = nbt.getByte("EntryDir");
       Formation formation = FormationManager.getInstance().getFormation(i);
-      if (formation == null) {
+      if (formation == null) { // temporally set new formation
          this.formation = FormationManager.getInstance().createNewFormation(this);
+         if (!jp.ngt.ngtlib.util.NGTUtil.isServer()) {
+            com.anatawa12.fixRtm.network.NetworkHandler.sendPacketServer(new com.anatawa12.fixRtm.network.RequestFormation(i));
+         }
       } else {
          this.formation = formation;
          formation.setTrain(this, b0, b1);
       }
 
@@ -174,10 +180,11 @@
       if (this.world.isRemote) {
          this.spawnSmoke();
       } else {
          this.updateChunks();
          this.updateATS();
+         this.updateAutoLinkingState();
       }
 
    }
 
    protected void updateFallState() {
@@ -293,25 +300,25 @@
          float f = this.getSpeed();
          int i = this.getNotch();
          Random random = this.world.rand;
 
          for(int j = 0; j < (modelsettrain.getConfig()).smoke.length; ++j) {
-            Vec3 vec3 = PooledVec3.create((modelsettrain.getConfig()).smoke[j][0], (modelsettrain.getConfig()).smoke[j][1], (modelsettrain.getConfig()).smoke[j][2]);
+            Vec3 vec3 = PooledVec3.create((double) (modelsettrain.getConfig()).smoke[j][0], (double) (modelsettrain.getConfig()).smoke[j][1], (double) (modelsettrain.getConfig()).smoke[j][2]);
             vec3 = vec3.rotateAroundX(this.rotationPitch);
             vec3 = vec3.rotateAroundY(this.rotationYaw);
-            double d0 = (modelsettrain.getConfig()).smoke[j][4];
-            double d1 = (modelsettrain.getConfig()).smoke[j][5];
+            double d0 = (double) (modelsettrain.getConfig()).smoke[j][4];
+            double d1 = (double) (modelsettrain.getConfig()).smoke[j][5];
             int k = f > 0.05F ? (int)d1 : (i > 0 ? (int)d0 + 3 : (int)d0);
             EnumParticleTypes enumparticletypes = NGTParticle.getParticle((String)(modelsettrain.getConfig()).smoke[j][3]);
 
             for(int l = 0; l < k; ++l) {
                double d2 = this.posX + vec3.getX() + (double)random.nextFloat() * 0.5D - 0.25D;
                double d3 = this.posY + vec3.getY() + (double)this.getVehicleYOffset();
                double d4 = this.posZ + vec3.getZ() + (double)random.nextFloat() * 0.5D - 0.25D;
                double d5 = 0.0625D;
                if ((modelsettrain.getConfig()).smoke.length == 7) {
-                  d5 = (modelsettrain.getConfig()).smoke[j][6];
+                  d5 = (double) (modelsettrain.getConfig()).smoke[j][6];
                }
 
                double d6 = (random.nextDouble() * 2.0D - 1.0D) * d5;
                double d7 = (random.nextDouble() * 2.0D - 1.0D) * d5;
                this.world.spawnParticle(enumparticletypes, d2, d3, d4, d6, 0.25D, d7, new int[0]);
@@ -441,25 +448,34 @@
             }
          }
 
          if (this.isControlCar() && flag && !this.world.isRemote) {
             ModelSetTrain modelsettrain = this.getResourceState().getResourceSet();
-            float f1 = EnumNotch.getAcceleration(i, f, modelsettrain.getConfig());
+            float f1 = EnumNotch.getAcceleration(i, Math.abs(f), modelsettrain.getConfig(), this);
+            // f: speed
+            // f1: acceleration
+            byte dir = this.getVehicleState(TrainState.TrainStateType.Role);
+            if ((dir == TrainState.Role_Back.data && f > 0) || (dir == TrainState.Role_Front.data && f < 0)) {
+               f1 = Math.abs(f1);
+            }
+            if (dir == TrainState.Role_Back.data) {
+               f1 *= -1;
+            }
             if (i >= 0) {
                float f2;
                if (this.rotationPitch == 0.0F) {
-                  float f3 = 2.0E-4F;
+                  float f3 = -modelsettrain.getConfig().deccelerations[0];
                   f2 = f > 0.0F ? f3 : (f < 0.0F ? -f3 : 0.0F);
                } else {
                   float f5 = 0.0125F;
                   float f4 = this.getTrainDirection() == 0 ? f5 : -f5;
                   f2 = NGTMath.sin(this.rotationPitch) * f4;
                }
 
                f = f + (f1 - f2);
             } else {
-               f = f + (f > 0.0F ? f1 : (f < 0.0F ? -f1 : 0.0F));
+               f = f + f1;
             }
 
             this.setSpeed(f);
          }
 
@@ -565,11 +581,11 @@
 
          return true;
       }
    }
 
-   protected void concatenation(EntityBogie bogie, EntityPlayer player) {
+   public void concatenation(EntityBogie bogie, EntityPlayer player) {
       int i = bogie.getBogieId();
       if (i >= 0) {
          if (this.getConnectedTrain(i) == null) {
             bogie.isActivated = true;
             NGTLog.sendChatMessage(player, "message.train.concatenation_mode", new Object[0]);
@@ -655,11 +671,11 @@
       if (!this.world.isRemote && par2.getTrain() != null) {
          int i = par1.getBogieId();
          int j = par2.getBogieId();
          if (i >= 0 && j >= 0 && this.getConnectedTrain(i) == null && par2.getTrain().formation != null) {
             this.formation.connectTrain(this, par2.getTrain(), i, j, par2.getTrain().formation);
-            RTMCore.proxy.playSound(par1, "block.anvil.place", 1.0F, 1.0F);
+            RTMCore.proxy.playSound(par1, "block.anvil.place", 2.0F, 1.0F);
             EntityPlayer entityplayer = null;
             if (this.getFirstPassenger() instanceof EntityPlayer) {
                entityplayer = (EntityPlayer)this.getFirstPassenger();
             } else if (par2.getTrain().getFirstPassenger() instanceof EntityPlayer) {
                entityplayer = (EntityPlayer)par2.getTrain().getFirstPassenger();
@@ -672,38 +688,38 @@
       }
 
    }
 
    public float getSpeed() {
-      return this.trainSpeed;
+      return this.getDataManager().get(TRAIN_SPEED);
    }
 
    public void setSpeed(float par1) {
       if (this.world.isRemote) {
-         this.trainSpeed = par1;
       } else if (this.isControlCar()) {
          this.formation.setSpeed(par1);
       }
 
    }
 
    public void setSpeed_NoSync(float par1) {
-      this.trainSpeed = par1;
+      this.getDataManager().set(TRAIN_SPEED, par1);
    }
 
    public void stopTrain(boolean changeSpeed) {
       if (this.formation != null) {
-         this.setNotch(-8);
+         this.setEmergencyBrake();
          if (changeSpeed) {
             this.setSpeed(0.0F);
          }
       }
 
    }
 
    public boolean isControlCar() {
-      return this.getVehicleState(TrainState.TrainStateType.Role) == TrainState.Role_Front.data;
+      byte role = this.getVehicleState(TrainState.TrainStateType.Role);
+      return role == TrainState.Role_Front.data || role == TrainState.Role_Back.data;
    }
 
    public boolean existBogies() {
       return this.getBogie(0) != null && this.getBogie(1) != null;
    }
@@ -760,10 +776,11 @@
    public int getTrainDirection() {
       return this.getVehicleState(TrainState.TrainStateType.Direction);
    }
 
    public void setTrainDirection(int par1) {
+      par1 = TrainState.TrainStateType.Direction.clap((byte) par1, this);
       if (this.formation == null) {
          this.setTrainDirection_NoSync((byte)par1);
       } else {
          this.formation.setTrainDirection((byte)par1, this);
       }
@@ -793,33 +810,46 @@
    public boolean addNotch(Entity driver, int par2) {
       if (par2 != 0) {
          int i = this.getNotch();
          if (this.setNotch(i + par2)) {
             RTMCore.proxy.playSound(driver, "rtm:sounds/train/lever.ogg", 1.0F, 1.0F);
-            if (i < 0 && par2 > 0 && !this.world.isRemote) {
-               this.playBrakeReleaseSound(i == -1);
-            }
-
             return true;
          }
       }
 
       return false;
    }
 
    public boolean setNotch(int par1) {
-      if (this.isControlCar() && par1 <= 5 && par1 >= -8) {
+
+      if (this.isControlCar() && this.getResourceState().getResourceSet().getConfig().isNotchInRange(par1)) {
          int i = this.getNotch();
          if (i != par1) {
             super.setVehicleState(TrainState.TrainStateType.Notch, (byte)par1);
+
+            if (i < 0 && par1 - i > 0 && !this.world.isRemote) {
+               java.util.Arrays.stream(getFormation().entries)
+                  .filter(java.util.Objects::nonNull)
+                  .map(entry -> entry.train)
+                  .filter(java.util.Objects::nonNull)
+                  .forEach(train -> train.playBrakeReleaseSound(par1 >= 0));
+            }
             return true;
          }
       }
 
       return false;
    }
 
+   public void setEmergencyBrake() {
+      int prevNotch = this.getNotch();
+      int EB_NOTCH = -(this.getResourceState().getResourceSet().getConfig().deccelerations.length - 1);
+      if (prevNotch != EB_NOTCH) {
+         this.setVehicleState(jp.ngt.rtm.entity.train.util.TrainState.TrainStateType.Notch, (byte) EB_NOTCH);
+      }
+   }
+
    public int getSignal() {
       return this.getVehicleState(TrainState.TrainStateType.Signal);
    }
 
    public void setSignal(int par1) {
@@ -883,10 +913,11 @@
          this.releaseTicket();
       }
 
       this.prevChunkCoordX = this.chunkCoordX;
       this.prevChunkCoordZ = this.chunkCoordZ;
+      this.prevChunkLoaderRadius = this.getVehicleState(TrainState.TrainStateType.ChunkLoader);
    }
 
    public boolean isChunkLoaderEnable() {
       return this.getVehicleState(TrainState.TrainStateType.ChunkLoader) > 0;
    }
@@ -903,11 +934,10 @@
    private boolean requestTicket() {
       Ticket ticket = RTMChunkManager.INSTANCE.getNewTicket(this.world, Type.ENTITY);
       if (ticket != null) {
          int i = this.getVehicleState(TrainState.TrainStateType.ChunkLoader);
          ticket.getModData();
-         ticket.setChunkListDepth(i);
          ticket.bindEntity(this);
          this.setChunkTicket(ticket);
          return true;
       } else {
          NGTLog.debug("[RTM] Failed to get ticket (Chunk Loader)");
@@ -931,24 +961,52 @@
       if (!this.world.isRemote) {
          if (this.ticket == null && !this.requestTicket()) {
             return;
          }
 
-         if (x != this.prevChunkCoordX || z != this.prevChunkCoordZ) {
+         if (this.getVehicleState(TrainState.TrainStateType.ChunkLoader) != this.prevChunkLoaderRadius
+                  || x != this.prevChunkCoordX || z != this.prevChunkCoordZ) {
             this.setupChunks(x, z);
          }
 
+         int chunkLoadSquareRadius = this.getVehicleState(TrainState.TrainStateType.ChunkLoader) * 2 + 1;
+         this.ticket.setChunkListDepth(Math.min(chunkLoadSquareRadius * chunkLoadSquareRadius, ForgeChunkManager.getMaxChunkDepthFor("rtm")));
+
          for(ChunkPos chunkpos : this.loadedChunks) {
             ForgeChunkManager.forceChunk(this.ticket, chunkpos);
+            ForgeChunkManager.reorderChunk(this.ticket, chunkpos);
          }
 
          ChunkPos chunkpos1 = new ChunkPos(x, z);
          ForgeChunkManager.forceChunk(this.ticket, chunkpos1);
+         ForgeChunkManager.reorderChunk(this.ticket, chunkpos1);
       }
 
    }
 
    private void setupChunks(int xChunk, int zChunk) {
       int i = this.getVehicleState(TrainState.TrainStateType.ChunkLoader);
       RTMChunkManager.INSTANCE.getChunksAround(this.loadedChunks, xChunk, zChunk, i);
    }
+
+   public boolean getAutoLinkingState() {
+      return autoLinkingState;
+   }
+
+   public void setAutoLinkingState(boolean state) {
+      autoLinkingState = state;
+   }
+
+   private void updateAutoLinkingState() {
+      if (!autoLinkingState) return;
+
+      if (getNotch() != 1) {
+         setVehicleState(TrainState.TrainStateType.AutoLinking, (byte) 0);
+         return;
+      }
+
+      if (getSpeed() > 15.0F / 72) {
+         setNotch(0);
+         setVehicleState(TrainState.TrainStateType.AutoLinking, (byte) 0);
+      }
+   }
 }
