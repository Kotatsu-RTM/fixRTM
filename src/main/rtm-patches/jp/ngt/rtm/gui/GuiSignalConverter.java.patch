--- a/jp/ngt/rtm/gui/GuiSignalConverter.java
+++ b/jp/ngt/rtm/gui/GuiSignalConverter.java
@@ -5,11 +5,10 @@
 import jp.ngt.rtm.RTMCore;
 import jp.ngt.rtm.electric.SignalConverterType;
 import jp.ngt.rtm.electric.TileEntitySignalConverter;
 import jp.ngt.rtm.network.PacketSignalConverter;
 import net.minecraft.client.gui.GuiButton;
-import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.gui.GuiTextField;
 import net.minecraft.client.resources.I18n;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
@@ -27,12 +26,12 @@
    }
 
    public void initGui() {
       super.initGui();
       this.buttonList.clear();
-      this.buttonList.add(new GuiButton(0, this.width / 2 - 155, this.height - 28, 150, 20, I18n.format("gui.done", new Object[0])));
-      this.buttonList.add(new GuiButton(1, this.width / 2 + 5, this.height - 28, 150, 20, I18n.format("gui.cancel", new Object[0])));
+      this.buttonList.add(new GuiButton(0, this.width / 2 - 155, this.height - 28, 150, 20, I18n.format("gui.done")));
+      this.buttonList.add(new GuiButton(1, this.width / 2 + 5, this.height - 28, 150, 20, I18n.format("gui.cancel")));
       int i = 0;
       if (this.scType == SignalConverterType.RSOut) {
          TileEntitySignalConverter.ComparatorType tileentitysignalconverter$comparatortype = this.tileEntity.getComparator();
          this.comparatorIndex = tileentitysignalconverter$comparatortype.id;
          this.button = new GuiButton(100, this.width / 2 - 36, 60, 30, 20, tileentitysignalconverter$comparatortype.operator);
@@ -41,23 +40,23 @@
       }
 
       int[] aint = this.tileEntity.getSignalLevel();
       this.textFields.clear();
       this.signalValues = new GuiTextField[this.scType == SignalConverterType.RSOut ? 1 : 2];
-      this.signalValues[0] = this.setTextField(this.width / 2 - 20 + i, 60, 40, 20, String.valueOf(aint[0]));
-      if (this.scType == SignalConverterType.RSIn || this.scType == SignalConverterType.Wireless) {
-         this.signalValues[1] = this.setTextField(this.width / 2 - 20 + i, 100, 40, 20, String.valueOf(aint[1]));
+      this.signalValues[0] = this.setIntegerField(this.width / 2 - 20 + i, 60, 40, 20, String.valueOf(aint[0]));
+      if (this.scType == SignalConverterType.RSIn) {
+         this.signalValues[1] = this.setIntegerField(this.width / 2 - 20 + i, 100, 40, 20, String.valueOf(aint[1]));
       }
 
    }
 
    protected void actionPerformed(GuiButton button) {
       if (button.id == 0) {
-         this.mc.displayGuiScreen((GuiScreen)null);
+         this.mc.displayGuiScreen(null);
          this.sendPacket();
       } else if (button.id == 1) {
-         this.mc.displayGuiScreen((GuiScreen)null);
+         this.mc.displayGuiScreen(null);
       } else if (button.id == 100) {
          this.comparatorIndex = (this.comparatorIndex + 1) % TileEntitySignalConverter.ComparatorType.values().length;
          this.button.displayString = TileEntitySignalConverter.ComparatorType.getType(this.comparatorIndex).operator;
       }
 
@@ -92,21 +91,15 @@
       }
 
       return aint;
    }
 
-   protected void keyTyped(char par1, int par2) {
-      if (par2 == 1 || par2 == this.mc.gameSettings.keyBindInventory.getKeyCode()) {
-         this.mc.player.closeScreen();
-      }
-
-      if (this.currentTextField != null && (par2 >= 2 && par2 <= 11 || par2 >= 200 && par2 <= 205 || par2 == 12 || par2 == 14 || par2 == 211)) {
-         this.currentTextField.textboxKeyTyped(par1, par2);
-      }
-
+   protected void keyTyped(char par1, int par2) throws java.io.IOException {
       if (par2 == 28) {
          this.formatSignalLevel();
+      } else {
+         super.keyTyped(par1, par2);
       }
 
    }
 
    public void drawScreen(int par1, int par2, float par3) {
@@ -118,10 +111,8 @@
          this.drawCenteredString(this.fontRenderer, "RS_OFF", this.width / 2, 85, 16777215);
       } else if (this.scType == SignalConverterType.RSOut) {
          this.drawCenteredString(this.fontRenderer, "Input signal level", this.width / 2, 40, 16777215);
       } else if (this.scType == SignalConverterType.Wireless) {
          this.drawCenteredString(this.fontRenderer, "Channel", this.width / 2, 45, 16777215);
-         this.drawCenteredString(this.fontRenderer, "Chunk Load Range", this.width / 2, 85, 16777215);
       }
-
    }
 }
