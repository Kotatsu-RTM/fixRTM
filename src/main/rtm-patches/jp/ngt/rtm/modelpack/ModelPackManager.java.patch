--- a/jp/ngt/rtm/modelpack/ModelPackManager.java
+++ b/jp/ngt/rtm/modelpack/ModelPackManager.java
@@ -1,18 +1,17 @@
 package jp.ngt.rtm.modelpack;
 
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
 import jp.ngt.ngtlib.io.FileType;
 import jp.ngt.ngtlib.io.NGTFileLoader;
 import jp.ngt.ngtlib.io.NGTJson;
 import jp.ngt.ngtlib.io.NGTLog;
 import jp.ngt.ngtlib.io.NGTText;
@@ -23,11 +22,10 @@
 import jp.ngt.ngtlib.renderer.model.ModelLoader;
 import jp.ngt.ngtlib.renderer.model.NGTOModel;
 import jp.ngt.ngtlib.renderer.model.NGTZModel;
 import jp.ngt.ngtlib.renderer.model.VecAccuracy;
 import jp.ngt.ngtlib.util.NGTUtil;
-import jp.ngt.rtm.RTMCore;
 import jp.ngt.rtm.RTMResource;
 import jp.ngt.rtm.block.tt.TimeTableManager;
 import jp.ngt.rtm.entity.util.CollisionHelper;
 import jp.ngt.rtm.modelpack.cfg.ModelConfig;
 import jp.ngt.rtm.modelpack.cfg.RRSConfig;
@@ -35,31 +33,33 @@
 import jp.ngt.rtm.modelpack.init.ModelPackLoadThread;
 import jp.ngt.rtm.modelpack.init.ProgressStateHolder;
 import jp.ngt.rtm.modelpack.model.RTMClassModels;
 import jp.ngt.rtm.modelpack.modelset.ModelSetBase;
 import jp.ngt.rtm.modelpack.modelset.ResourceSet;
-import jp.ngt.rtm.network.PacketModelSet;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 public final class ModelPackManager {
    public static final ModelPackManager INSTANCE = new ModelPackManager();
    private static final Pattern SC_INCLUDE = Pattern.compile("//include <(.+)>");
    private static final String[] ENCODING = new String[]{"UTF-8", "SJIS"};
    private final Map<String, ResourceType> typeMap = new HashMap<>(32);
-   private final Map<ResourceType, Map<String, ResourceSet>> allModelSetMap = new HashMap<>(256);
-   private final Map<ResourceType, Map<String, ResourceSet>> smpModelSetMap = new HashMap<>(256);
-   private final Map<String, ResourceSet> dummyMap = new HashMap<>(32);
-   public final List<ResourceSet> unconstructSets = new ArrayList<>(256);
+   public final Map<ResourceType, Map<String, ResourceSet>> allModelSetMap = new HashMap<>(256);
+   public final Map<ResourceType, Map<String, ResourceSet>> smpModelSetMap = new HashMap<>(256);
+   public final Map<String, ResourceSet> dummyMap = new HashMap<>(32);
+   public final java.util.concurrent.locks.ReadWriteLock modelSetMapLock = new java.util.concurrent.locks.ReentrantReadWriteLock();
+   public final List<ResourceSet<?>> unconstructSets = new ArrayList<>();
    private final Map<String, IModelNGT> modelCache = new HashMap<>(128);
    private final Map<String, Map<String, ResourceLocation>> resourceCache = new HashMap<>(256);
    private final Map<String, String> scriptCache = new HashMap<>(64);
    public final List<File> fileCache = new ArrayList<>(1024);
    public boolean modelLoaded;
+   public volatile boolean modelConstructed;
    private static final String DEFAULT_DOMAIN = "minecraft";
+   private byte[] byteArrayToSendToClient;
 
    private ModelPackManager() {
    }
 
    public void load(ModelPackLoadThread par1) {
@@ -114,14 +114,48 @@
       for(File file2 : list2) {
          ++i;
          String s1 = file2.getName();
          par1.setBarValue(1, i, s1);
          RRSConfig rrsconfig = new RRSConfig(s1);
+         rrsconfig.file = file2;
          this.registerResourceSet(RTMResource.RRS, rrsconfig, "dummy_str");
       }
 
       TimeTableManager.INSTANCE.load();
+
+      final AtomicInteger bytes = new AtomicInteger();
+
+      allModelSetMap.forEach((type, resourceSets) -> {
+         bytes.addAndGet(4); //model type length
+         bytes.addAndGet(type.name.getBytes(StandardCharsets.UTF_8).length); //model type
+         bytes.addAndGet(4); //number of models
+
+         resourceSets.forEach((name, resourceSet) -> {
+            bytes.addAndGet(4); //model name length
+            bytes.addAndGet(name.getBytes(StandardCharsets.UTF_8).length);
+         });
+      });
+
+      ByteBuffer buffer = ByteBuffer.allocate(bytes.get());
+
+      allModelSetMap.forEach((type, resourceSets) -> {
+         byte[] typeName = type.name.getBytes(StandardCharsets.UTF_8);
+         buffer.putInt(typeName.length);
+         buffer.put(typeName);
+         buffer.putInt(resourceSets.size());
+
+         resourceSets.forEach((name, resourceSet) -> {
+            byte[] modelName = name.getBytes(StandardCharsets.UTF_8);
+            buffer.putInt(modelName.length);
+            buffer.put(modelName);
+         });
+      });
+
+      buffer.rewind();
+      byteArrayToSendToClient = new byte[buffer.remaining()];
+      buffer.get(byteArrayToSendToClient);
+
       par1.loadFinished = true;
       this.modelLoaded = true;
    }
 
    public void registerType(ResourceType type) {
@@ -143,49 +177,46 @@
    public ResourceType getType(String name) {
       return this.typeMap.get(name);
    }
 
    public String registerResourceSet(ResourceType type, File file) throws IOException {
-      for(String s : ENCODING) {
-         try {
-            String s1 = NGTText.readText(file, false, s);
-            ResourceConfig resourceconfig = (ResourceConfig)NGTJson.getObjectFromJson(s1, type.cfgClass);
-            return this.registerResourceSet(type, resourceconfig, s1);
-         } catch (IOException ioexception) {
-            ioexception.printStackTrace();
-         }
-      }
+      List<String> json = NGTText.readText(file, null);;
 
-      throw new ModelPackException("Can't load model", file.getAbsolutePath());
+      ResourceConfig resourceconfig = (ResourceConfig)NGTJson.getObjectFromJson(com.anatawa12.fixRtm.UtilsKt.joinLinesForJsonReading(json), type.cfgClass);
+      resourceconfig.file = file;
+      return this.registerResourceSet(type, resourceconfig, NGTText.append(json, false));
    }
 
    public String registerResourceSet(ResourceType type, ResourceConfig cfg, String origJson) {
       cfg.init();
       ResourceSet resourceset = this.getNewModelSet(type, new Class[]{type.cfgClass}, cfg);
       if (resourceset != null) {
-         NGTLog.debug("Registr resource : %s (%s)", new Object[]{cfg.getName(), type.name});
+         if (!com.anatawa12.fixRtm.asm.config.MainConfig.reduceConstructModelLog) {
+            NGTLog.debug("Registr resource : %s (%s)", new Object[]{cfg.getName(), type.name});
+         } else {
+            NGTLog.trace("Registr resource : %s (%s)", new Object[]{cfg.getName(), type.name});
+         }
+         modelSetMapLock.writeLock().lock();
+         try {
          this.allModelSetMap.get(type).put(cfg.getName(), resourceset);
+         } finally {
+            modelSetMapLock.writeLock().unlock();
+         }
          this.unconstructSets.add(resourceset);
          resourceset.md5 = EncryptedModel.getMD5(EncryptedModel.formatJson(origJson));
          return cfg.getName();
       } else {
          throw new ModelPackException("Failed to create ResourceSet", cfg.getName());
       }
    }
 
    public void sendModelSetsToClient(EntityPlayerMP player) {
-      int i = 0;
-
-      for(Entry<ResourceType, Map<String, ResourceSet>> entry : this.allModelSetMap.entrySet()) {
-         for(ResourceSet resourceset : entry.getValue().values()) {
-            ResourceConfig resourceconfig = resourceset.getConfig();
-            RTMCore.NETWORK_WRAPPER.sendTo(new PacketModelSet(i, (entry.getKey()).name, resourceconfig.getName()), player);
-            NGTLog.debug("[RTM] Send model to client : " + resourceconfig.getName());
-            ++i;
-         }
-      }
-
+      com.anatawa12.fixRtm.network.NetworkHandler.sendPacketEPM(
+         new com.anatawa12.fixRtm.network.PacketAllModelSets(byteArrayToSendToClient),
+         player
+      );
+      com.anatawa12.fixRtm.network.NetworkHandler.sendPacketEPM(new com.anatawa12.fixRtm.network.SentAllModels(), player);
    }
 
    public void addModelSetName(int count, String typeName, String name) {
       assert NGTUtil.isSMP() && !NGTUtil.isServer();
 
@@ -227,16 +258,13 @@
          resourcetype = type.parent;
       }
 
       boolean flag = NGTUtil.isSMP() && !NGTUtil.isServer();
       Map<ResourceType, Map<String, ResourceSet>> map = flag ? this.smpModelSetMap : this.allModelSetMap;
-      T t = map.get(resourcetype).get(name);
+      T t = (T)map.get(resourcetype).get(name);
       if (t == null) {
-         t = this.dummyMap.get(type.hasSubType ? type.subType : type.name);
-         if (t == null) {
-            throw new ModelPackException("Default model is not registered.", name);
-         }
+         return (T)com.anatawa12.fixRtm.DummyModelPackManager.getSet(type, name);
       }
 
       return t;
    }
 
