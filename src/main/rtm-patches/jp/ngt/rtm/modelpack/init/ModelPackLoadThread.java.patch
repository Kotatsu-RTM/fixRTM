--- a/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
+++ b/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
@@ -33,38 +33,34 @@
       this.threadSide = par1;
       this.displayWindow = par1 == Side.CLIENT && !GraphicsEnvironment.isHeadless();
       if (this.displayWindow) {
          this.initWindow();
       }
-
    }
 
    private void initWindow() {
       int i = 2;
       this.bars = new JProgressBar[i];
       this.labels = new JLabel[i];
       this.maxValue = new int[i];
-      int j = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getWidth();
-      int k = j / 1024;
-      float f = 16.0F;
-      this.mainFrame = new MPLFrame(k);
+      this.mainFrame = new MPLFrame(1);
       JPanel jpanel = new JPanel();
       jpanel.setLayout(new BoxLayout(jpanel, 1));
       jpanel.setBackground(Color.BLACK);
       JPanel jpanel1 = new JPanel();
       jpanel1.setBackground(Color.BLACK);
       jpanel1.setLayout(new BoxLayout(jpanel1, 0));
-      this.adButton = new MPLAdButton(k);
-      JButton jbutton = new MPLMoveButton(this.adButton, -1, k);
-      JButton jbutton1 = new MPLMoveButton(this.adButton, 1, k);
+      this.adButton = new MPLAdButton(1);
+      JButton jbutton = new MPLMoveButton(this.adButton, -1, 1);
+      JButton jbutton1 = new MPLMoveButton(this.adButton, 1, 1);
       jpanel1.add(jbutton);
       jpanel1.add(this.adButton);
       jpanel1.add(jbutton1);
       jpanel.add(jpanel1);
-      JPanel jpanel2 = new MPLBarPanel(this.labels[0] = new JLabel("Start Loading"), this.bars[0] = new JProgressBar(), k);
+      JPanel jpanel2 = new MPLBarPanel(this.labels[0] = new JLabel("Start Loading"), this.bars[0] = new JProgressBar(), 1);
       jpanel.add(jpanel2);
-      JPanel jpanel3 = new MPLBarPanel(this.labels[1] = new JLabel("Ready"), this.bars[1] = new JProgressBar(), k);
+      JPanel jpanel3 = new MPLBarPanel(this.labels[1] = new JLabel("Ready"), this.bars[1] = new JProgressBar(), 1);
       jpanel.add(jpanel3);
       this.mainFrame.getContentPane().add(jpanel);
    }
 
    public void run() {
@@ -78,11 +74,11 @@
 
             public void run() {
                while(!ModelPackLoadThread.this.finished) {
                   if (ModelPackLoadThread.this.displayWindow) {
                      ++this.count;
-                     if (this.count >= 30) {
+                     if (this.count >= 20) {
                         ModelPackLoadThread.this.adButton.changeImage(1);
                         this.count = 0;
                      }
                   }
 
@@ -97,17 +93,19 @@
          };
          thread.start();
          this.runThread();
       } catch (Throwable throwable) {
          this.finish();
+         CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Loading RTM ModelPack");
+         crashreport.makeCategory("Initialization");
          if (this.threadSide == Side.CLIENT) {
-            CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Loading RTM ModelPack");
-            crashreport.makeCategory("Initialization");
             crashreport = NGTUtilClient.getMinecraft().addGraphicsAndWorldToCrashReport(crashreport);
             NGTUtilClient.getMinecraft().displayCrashReport(crashreport);
          } else {
-            throwable.printStackTrace();
+            // Kotlin intellij plugin issue: reportCrash$fixRtm looks not found
+            // in ide but should be found in gradle build
+            com.anatawa12.fixRtm.FixRtm.INSTANCE.reportCrash$fixRtm(crashreport);
          }
       } finally {
          if (this.displayWindow && !this.debug) {
             this.mainFrame.dispose();
          }
@@ -131,19 +129,20 @@
          }
       }
 
       this.setBarMaxValue(0, ProgressStateHolder.ProgressState.values().length, "");
       NGTLog.startTimer();
-      ModelPackConstructThread modelpackconstructthread = new ModelPackConstructThread(this.threadSide, this);
+      com.anatawa12.fixRtm.rtm.modelpack.init.ExModelPackConstructThread modelpackconstructthread = new com.anatawa12.fixRtm.rtm.modelpack.init.ExModelPackConstructThread(this.threadSide, this);
       modelpackconstructthread.start();
       ModelPackManager.INSTANCE.load(this);
 
       while(!modelpackconstructthread.setFinish()) {
          sleep(500L);
       }
 
       this.finish();
+      ModelPackManager.INSTANCE.modelConstructed = true;
       NGTLog.stopTimer("Model load time");
    }
 
    public void finish() {
       this.finished = true;
