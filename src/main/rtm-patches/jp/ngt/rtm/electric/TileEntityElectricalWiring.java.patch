--- a/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
+++ b/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
@@ -19,11 +19,11 @@
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.ITickable;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.world.World;
 
-public abstract class TileEntityElectricalWiring extends TileEntityCustom implements ITickable {
+public abstract class TileEntityElectricalWiring extends jp.ngt.ngtlib.block.TileEntityPlaceable implements ITickable {
    protected List<Connection> connections = new ArrayList<>();
    public boolean isActivated;
    private int signal;
    private int prevSignal = -1;
 
@@ -73,10 +73,14 @@
 
    public List<Connection> getConnnectionList() {
       return this.connections;
    }
 
+   public jp.ngt.ngtlib.math.Vec3 getWirePos() {
+      return jp.ngt.ngtlib.math.Vec3.ZERO;
+   }
+
    public boolean setConnectionTo(int x, int y, int z, Connection.ConnectionType type, ResourceState state) {
       boolean flag = false;
       if (type == Connection.ConnectionType.NONE) {
          Connection connection = this.getConnection(x, y, z);
          if (connection != null) {
@@ -275,34 +279,39 @@
 
       return false;
    }
 
    private TileEntityElectricalWiring searchActiveTEEW() {
-      int i = this.getX();
-      int j = this.getY();
-      int k = this.getZ();
+      int x = this.getX();
+      int y = this.getY();
+      int z = this.getZ();
       int l = RTMCore.connectorSearchRange;
-      int i1 = l * 2;
-
-      for(int j1 = 0; j1 < i1; ++j1) {
-         for(int k1 = 0; k1 < i1; ++k1) {
-            for(int l1 = 0; l1 < i1; ++l1) {
-               TileEntityElectricalWiring tileentityelectricalwiring = this.getWireTileEntity(i - l + j1, j - l + k1, k - l + l1, Connection.ConnectionType.NONE, false);
-               if ((j1 != l || k1 != l || l1 != l) && tileentityelectricalwiring != null && tileentityelectricalwiring.isActivated) {
-                  return tileentityelectricalwiring;
-               }
-            }
+      // for sqrt
+      int dis0 = RTMCore.connectorSearchRange * 2;
+      int dis1 = dis0 * dis0;
+      List<TileEntity> tileEntityList = this.world.loadedTileEntityList;
+      if (tileEntityList != null && !tileEntityList.isEmpty()) {
+         TileEntityElectricalWiring teew = tileEntityList.stream()
+            .filter(tile -> tile != this)
+            .filter(TileEntityElectricalWiring.class::isInstance)
+            .map(TileEntityElectricalWiring.class::cast)
+            .filter(tile -> tile.isActivated)
+            .filter(tile -> tile.getDistanceSq(x, y, z) < dis1)
+            .min(java.util.Comparator.comparingDouble(o -> o.getDistanceSq(x, y, z)))
+            .orElse(null);
+         if (teew != null) {
+            return teew;
          }
       }
 
-      List<EntityElectricalWiring> list = this.world.getEntitiesWithinAABB(EntityElectricalWiring.class, new AxisAlignedBB((double)(i - l), (double)(j - l), (double)(k - l), (double)(i + l), (double)(j + l), (double)(k + l)));
+      List<EntityElectricalWiring> list = this.world.getEntitiesWithinAABB(EntityElectricalWiring.class, new AxisAlignedBB(getPos()).grow(l, l, l));
       if (!list.isEmpty()) {
-         for(EntityElectricalWiring entityelectricalwiring : list) {
-            if (entityelectricalwiring.tileEW.isActivated) {
-               return entityelectricalwiring.tileEW;
-            }
-         }
+         return list.stream()
+            .map(entity -> entity.tileEW)
+            .filter(tileEW -> tileEW.isActivated)
+            .min(java.util.Comparator.comparingDouble(o -> o.getDistanceSq(x, y, z)))
+            .orElse(null);
       }
 
       return null;
    }
 
