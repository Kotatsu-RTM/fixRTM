--- a/jp/ngt/rtm/item/ItemWithModel.java
+++ b/jp/ngt/rtm/item/ItemWithModel.java
@@ -18,45 +18,57 @@
 import net.minecraft.util.ActionResult;
 import net.minecraft.util.text.TextFormatting;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom implements IResourceSelector {
-   private ItemStack selectedItem;
-   private EntityPlayer selectedPlayer;
-
+public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom {
    public ItemWithModel() {
       this.setHasSubtypes(true);
    }
 
    protected ActionResult<ItemStack> onItemRightClick(ItemArgHolder holder) {
       if (holder.getWorld().isRemote) {
          if (this.getModelType(holder.getItemStack()) != null) {
-            this.selectedItem = holder.getItemStack();
-            this.selectedPlayer = holder.getPlayer();
-            holder.getPlayer().openGui(RTMCore.instance, this.getGuiId(holder.getItemStack()), holder.getWorld(), 0, -1, 0);
+            net.minecraft.client.Minecraft.getMinecraft().displayGuiScreen(newGuiScreen(holder));
          } else {
             NGTLog.debug("No Type");
          }
       }
 
       return holder.success();
    }
 
-   public abstract int getGuiId(ItemStack var1);
+   @SideOnly(Side.CLIENT)
+   protected final net.minecraft.client.gui.GuiScreen newGuiSelectModel(ItemArgHolder holder) {
+      return new jp.ngt.rtm.gui.GuiSelectModel(holder.getWorld(), new ResourceSelector(holder));
+   }
+
+   @SideOnly(Side.CLIENT)
+   public abstract net.minecraft.client.gui.GuiScreen newGuiScreen(ItemArgHolder holder);
 
    @SideOnly(Side.CLIENT)
    protected void addInformation(ItemArgHolder holder, List<String> list, ITooltipFlag flag) {
       if (ModelPackManager.INSTANCE.modelLoaded) {
          ResourceState resourcestate = this.getModelState(holder.getItemStack());
          if (resourcestate != null) {
             list.add(TextFormatting.GRAY + resourcestate.getResourceName());
          }
+         addMoreInfo(holder.getItemStack(), list);
       }
 
    }
 
+   protected void addMoreInfo(ItemStack stack, List<String> list) {
+      ResourceState<T> state = this.getModelState(stack);
+      if (state != null && state.getDataMap().getEntries().size() > 0) {
+         list.add(TextFormatting.DARK_PURPLE + "(+DataMap)");
+      }
+      if (com.anatawa12.fixRtm.rtm.item.ItemWithModelEx.hasOffset(stack)) {
+         list.add(TextFormatting.DARK_PURPLE + "(+Offset)");
+      }
+   }
+
    protected abstract ResourceType getModelType(ItemStack var1);
 
    public ResourceState<T> getModelState(ItemStack itemStack) {
       ResourceType resourcetype = this.getModelType(itemStack);
       if (resourcetype != null) {
@@ -82,27 +94,36 @@
       if (!itemStack.hasTagCompound()) {
          itemStack.setTagCompound(new NBTTagCompound());
       }
 
       itemStack.getTagCompound().setTag("State", state.writeToNBT());
-      if (this.selectedPlayer != null) {
-         PacketNBT.sendToServer(this.selectedPlayer, this.selectedItem);
-      }
 
    }
 
+   //@formatter:off
+   public class ResourceSelector implements IResourceSelector<T> {
+      private final ItemStack selectedItem;
+      private final EntityPlayer selectedPlayer;
+      public ResourceSelector(ItemArgHolder holder) {
+         this.selectedItem = holder.getItemStack();
+         this.selectedPlayer = holder.getPlayer();
+      }
+
    public ResourceState<T> getResourceState() {
-      return this.getModelState(this.selectedItem);
+      return getModelState(this.selectedItem);
    }
 
    public void updateResourceState() {
    }
 
    public int[] getSelectorPos() {
       return new int[3];
    }
 
    public boolean closeGui(ResourceState par1) {
-      this.setModelState(this.selectedItem, par1);
+      setModelState(this.selectedItem, par1);
+      PacketNBT.sendToServer(this.selectedPlayer, this.selectedItem);
       return true;
    }
+   }// end of ResourceSelector
+   //@formatter:on
 }
